version: "3.8"

services:
  nginx:
    restart: on-failure
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - .:/app
      - ./config/nginx/local.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - server
    networks:
      app-network:
        aliases:
          - nginx

  db:
    image: postgres:11
    restart: always
    env_file:
      - ${ENV}
    environment:
      - POSTGRES_USER=${POSTGRES_DEFAULT_USER}
      - POSTGRES_PASSWORD=${POSTGRES_DEFAULT_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - .:/app
      - postgres_data:/var/lib/postgresql/data/
    container_name: airbnb_db
    networks:
      - app-network

  redis:
    image: redis
    env_file:
      - ${ENV}
    ports:
      - "6380:6379"
    container_name: ${AIRBNB_REDIS_HOST}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network

  daphne:
    restart: always
    env_file:
      - ${ENV}
    build: .
    volumes:
      - .:/app
    image: daphne:airbnb-app
    command: >
      bash -c "cd /app/airbnb_app/
      && daphne -b 0.0.0.0 -p 8001 airbnb.asgi:application"
    expose:
      - 8001
    depends_on:
      - db
    networks:
      app-network:
        aliases:
          - daphne

  server:
    restart: always
    env_file:
      - ${ENV}
    build: .
    volumes:
      - .:/app
    image: server:airbnb-app
    command: >
      bash -c "cd /app/airbnb_app/
      && python manage.py migrate --noinput
      && python manage.py collectstatic --no-input
      && gunicorn --reload -c /app/config/gunicorn_config.py airbnb.wsgi"
    expose:
      - 8000
    depends_on:
      - db
    networks:
        app-network:
            aliases:
                - server

  celery:
    restart: always
    env_file:
      - ${ENV}
    build: .
    command: >
      bash -c "cd /app/airbnb_app/
      && celery -A airbnb worker -l info"
    healthcheck:
      test: celery -A airbnb inspect ping
      interval: 10s
      timeout: 10s
      retries: 3
    volumes:
      - .:/app
    links:
      - redis
    depends_on:
      - redis
      - server
    networks:
      - app-network

  flower:
    image: mher/flower:0.9.5
    env_file:
      - ${ENV}
    command: celery flower --broker=${CELERY_BROKER_URL} --port=${FLOWER_PORT}
    ports:
      - "8888:${FLOWER_PORT}"
    restart: unless-stopped
    depends_on:
      - celery
      - redis
    container_name: airbnb_flower
    networks:
        app-network:
            aliases:
                - flower

  celery_beat:
    restart: on-failure
    env_file:
      - ${ENV}
    build: .
    volumes:
      - .:/app
    command: >
      bash -c "cd /app/airbnb_app/
      && celery -A airbnb beat -l info --pidfile= --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - redis
      - db
      - server
    container_name: airbnb_celery_beat
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
