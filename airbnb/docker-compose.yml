version: "3.8"

services:
  db:
    image: postgres:11
    restart: always
    env_file:
      - ${ENV}
    environment:
      - POSTGRES_USER=${POSTGRES_DEFAULT_USER}
      - POSTGRES_PASSWORD=${POSTGRES_DEFAULT_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - .:/app
      - postgres_data:/var/lib/postgresql/data/
    container_name: airbnb_db
    networks:
      - app-network

  redis:
    image: redis
    env_file:
      - ${ENV}
    ports:
      - "6380:6379"
    container_name: ${AIRBNB_REDIS_HOST}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network

  server:
    restart: always
    env_file:
      - ${ENV}
    build:
      context: .
    volumes:
      - .:/app
    image: server:airbnb-app
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    depends_on:
      - db
    container_name: airbnb_app
    networks:
      - app-network

  celery:
    restart: always
    env_file:
      - ${ENV}
    build:
      context: .
    command: celery -A airbnb worker -l info
    volumes:
      - .:/app
    links:
      - redis
    depends_on:
      - redis
      - server
    networks:
      - app-network

  flower:
    image: mher/flower:0.9.5
    env_file:
      - ${ENV}
    depends_on:
      - celery
      - redis
    container_name: airbnb_flower
    networks:
      - app-network

  celery_beat:
    restart: on-failure
    env_file:
      - ${ENV}
    build:
      context: .
    volumes:
      - .:/app
    command: celery -A airbnb beat -l info --pidfile= --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - redis
      - db
      - server
    container_name: airbnb_celery_beat
    networks:
      - app-network


volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
