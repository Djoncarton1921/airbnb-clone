version: "3.8"

services:
  traefik:
    image: traefik:v2.5
    env_file:
      - ${ENV}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
      - daphne
    command:
      # docker swarm configuration
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=app_network"

      # entrypoints configuration
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # SSL configuration
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencryptresolver.acme.email=romanreznikov2002@yandex.ru"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json"

      # enable dashboard
      - "--api.dashboard=true"
      - "--api"
    volumes:
      - traefik-certificates:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      app_network:
        aliases:
          - traefik
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 15s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      labels:
        - "traefik.enable=true"

        # global redirect to https
        - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

        # middleware redirect
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

        # required by swarm but not used
        - "traefik.http.services.traefik.loadbalancer.server.port=888"

        # Traefik dashboard
        - "traefik.http.routers.traefik.rule=Host(`traefik.airproject.xyz`)"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.tls.certresolver=letsencryptresolver"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.middlewares=authtraefik"
        - "traefik.http.middlewares.authtraefik.basicauth.users=admin:$$apr1$$o6eYRTgC$$xXcKmm/pqAp5767ez4yuP0"

  nginx:
    image: nginx:1.21-alpine
    volumes:
      - ./config/nginx/stack.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/home/app/web/airbnb_app/airbnb/static
    networks:
      app_network:
        aliases:
          - nginx
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 15s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.nginx.rule=Host(`airproject.xyz`) && PathPrefix(`/static`)"
        - "traefik.http.routers.nginx.entrypoints=websecure"
        - "traefik.http.routers.nginx.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.nginx.loadbalancer.server.port=80"

  daphne:
    image: romanreznikov/backend:${CI_COMMIT_SHORT_SHA}
    env_file:
      - ${ENV}
    command: >
      bash -c "cd /home/app/web/airbnb_app/
      && daphne -b 0.0.0.0 -p 8001 airbnb.asgi:application"
    volumes:
      - static_volume:/home/app/web/airbnb_app/airbnb/static
      - ./config/postgres/certs/root.crt:${POSTGRES_SSL_CERT_DOCKER_PATH:-/usr/local/etc/.postgresql/root.crt}
      - ./config/redis/certs/YandexInternalRootCA.crt:${REDIS_SSL_CERT_DOCKER_PATH:-/usr/local/share/ca-certificates/Yandex/YandexInternalRootCA.crt}
    networks:
      app_network:
        aliases:
          - daphne
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.daphne.rule=Host(`airproject.xyz`) && PathPrefix(`/ws`)"
        - "traefik.http.routers.daphne.entrypoints=websecure"
        - "traefik.http.routers.daphne.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.daphne.loadbalancer.server.port=8001"
    healthcheck:
      interval: 5s
      retries: 2
      # No healthcheck for `daphne` service
      test: exit 0

  server:
    image: romanreznikov/backend:${CI_COMMIT_SHORT_SHA}
    env_file:
      - ${ENV}
    environment:
      - DEBUG=0
      - ENVIRONMENT=prod
      - DJANGO_SETTINGS_MODULE=airbnb.settings.pro
    command: >
      bash -c "cd /home/app/web/airbnb_app/
      && python manage.py collectstatic --no-input
      && gunicorn -c /home/app/web/config/gunicorn_config.py airbnb.wsgi"
    networks:
        app_network:
          aliases:
            - server
    volumes:
      - static_volume:/home/app/web/airbnb_app/airbnb/static
      - ./config/postgres/certs/root.crt:${POSTGRES_SSL_CERT_DOCKER_PATH:-/usr/local/etc/.postgresql/root.crt}
      - ./config/redis/certs/YandexInternalRootCA.crt:${REDIS_SSL_CERT_DOCKER_PATH:-/usr/local/share/ca-certificates/Yandex/YandexInternalRootCA.crt}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 15s
      rollback_config:
        parallelism: 1
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      # FIXME: add `server` healthcheck
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.server.rule=Host(`airproject.xyz`)"
        - "traefik.http.routers.server.entrypoints=websecure"
        - "traefik.http.routers.server.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.server.loadbalancer.server.port=8000"

  celery:
    image: romanreznikov/backend:${CI_COMMIT_SHORT_SHA}
    env_file:
      - ${ENV}
    command: >
      bash -c "cd /home/app/web/airbnb_app/
      && celery -A airbnb worker -Q default,celery,emails,urgent_notifications -l info -c 2 -n default_worker --autoscale=4,2"
    depends_on:
      - server
    networks:
      - app_network
    volumes:
      - ./config/postgres/certs/root.crt:${POSTGRES_SSL_CERT_DOCKER_PATH:-/usr/local/etc/.postgresql/root.crt}
      - ./config/redis/certs/YandexInternalRootCA.crt:${REDIS_SSL_CERT_DOCKER_PATH:-/usr/local/share/ca-certificates/Yandex/YandexInternalRootCA.crt}
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: pause
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      interval: 5s
      retries: 2
      # Celery `ping` commands do not work with SQS broker
      # https://docs.celeryproject.org/en/stable/getting-started/backends-and-brokers/sqs.html#caveats
      test: exit 0

  celery_high_priority:
    image: romanreznikov/backend:${CI_COMMIT_SHORT_SHA}
    env_file:
      - ${ENV}
    command: >
      bash -c "cd /home/app/web/airbnb_app/
      && celery -A airbnb worker -Q urgent_notifications -l info -c 1 -n high_priority"
    depends_on:
      - server
    networks:
      - app_network
    volumes:
      - ./config/postgres/certs/root.crt:${POSTGRES_SSL_CERT_DOCKER_PATH:-/usr/local/etc/.postgresql/root.crt}
      - ./config/redis/certs/YandexInternalRootCA.crt:${REDIS_SSL_CERT_DOCKER_PATH:-/usr/local/share/ca-certificates/Yandex/YandexInternalRootCA.crt}
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: pause
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      interval: 5s
      retries: 2
      # Celery `ping` commands do not work with SQS broker
      # https://docs.celeryproject.org/en/stable/getting-started/backends-and-brokers/sqs.html#caveats
      test: exit 0

  celery_low_priority:
    image: romanreznikov/backend:${CI_COMMIT_SHORT_SHA}
    env_file:
      - ${ENV}
    command: >
      bash -c "cd /home/app/web/airbnb_app/
      && celery -A airbnb worker -Q emails,urgent_notifications -l info -c 1 -n low_priority"
    depends_on:
      - server
    networks:
      - app_network
    volumes:
      - ./config/postgres/certs/root.crt:${POSTGRES_SSL_CERT_DOCKER_PATH:-/usr/local/etc/.postgresql/root.crt}
      - ./config/redis/certs/YandexInternalRootCA.crt:${REDIS_SSL_CERT_DOCKER_PATH:-/usr/local/share/ca-certificates/Yandex/YandexInternalRootCA.crt}
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: pause
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      interval: 5s
      retries: 2
      # Celery `ping` commands do not work with SQS broker
      # https://docs.celeryproject.org/en/stable/getting-started/backends-and-brokers/sqs.html#caveats
      test: exit 0

  celery_beat:
    image: romanreznikov/backend:${CI_COMMIT_SHORT_SHA}
    env_file:
      - ${ENV}
    command: >
      bash -c "cd /home/app/web/airbnb_app/
      && celery -A airbnb beat -l info --pidfile= --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - server
      - celery
    networks:
      - app_network
    volumes:
      - ./config/postgres/certs/root.crt:${POSTGRES_SSL_CERT_DOCKER_PATH:-/usr/local/etc/.postgresql/root.crt}
      - ./config/redis/certs/YandexInternalRootCA.crt:${REDIS_SSL_CERT_DOCKER_PATH:-/usr/local/share/ca-certificates/Yandex/YandexInternalRootCA.crt}
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      interval: 5s
      retries: 2
      # Celery `ping` commands do not work with SQS broker
      # https://docs.celeryproject.org/en/stable/getting-started/backends-and-brokers/sqs.html#caveats
      test: exit 0

networks:
  app_network:

volumes:
  static_volume:
  crontabs:
  traefik-certificates:
