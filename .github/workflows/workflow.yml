name: Main workflow

on:
  push:
    paths-ignore:
      - '**.md'

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
#  lint:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: [3.9]
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.linter.txt
#      - name: Check editorconfig settings
#        run: ec
#      - name: Lint with flake8
#        run: flake8 .
#      - name: Lint with isort
#        run: isort -qc .

#  deploy_cloud_functions:
#    name: "Deploy all Yandex Cloud Functions"
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: [ 3.9 ]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
#    needs: lint
#    concurrency:
#      group: Prod
#      cancel-in-progress: true
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.linter.txt
#      - name: Install Yandex Cloud CLI
#        run: |
#          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
#      - name: Deploy cloud functions
#        env:
#          YANDEX_CLOUD_FUNCTIONS_DEBUG: ${{ secrets.YANDEX_CLOUD_FUNCTIONS_DEBUG }}
#          YANDEX_CLOUD_FUNCTIONS_OAUTH_TOKEN: ${{ secrets.YANDEX_CLOUD_FUNCTIONS_OAUTH_TOKEN }}
#          YANDEX_CLOUD_FUNCTIONS_AWS_ACCESS_KEY_ID: ${{ secrets.YANDEX_CLOUD_FUNCTIONS_AWS_ACCESS_KEY_ID }}
#          YANDEX_CLOUD_FUNCTIONS_AWS_ACCESS_KEY_SECRET: ${{ secrets.YANDEX_CLOUD_FUNCTIONS_AWS_ACCESS_KEY_SECRET }}
#          YANDEX_CLOUD_FUNCTIONS_AWS_DEFAULT_REGION: ${{ secrets.YANDEX_CLOUD_FUNCTIONS_AWS_DEFAULT_REGION }}
#          YANDEX_FUNCTION_DELETE_IMAGE_SERVICE_ACCOUNT_ID: ${{ secrets.YANDEX_FUNCTION_DELETE_IMAGE_SERVICE_ACCOUNT_ID }}
#          YANDEX_FUNCTION_DELETE_IMAGE_CLOUD_ID: ${{ secrets.YANDEX_FUNCTION_DELETE_IMAGE_CLOUD_ID }}
#          YANDEX_FUNCTION_DELETE_IMAGE_FOLDER_ID: ${{ secrets.YANDEX_FUNCTION_DELETE_IMAGE_FOLDER_ID }}
#          YANDEX_FUNCTION_DELETE_IMAGE_IAM_TOKEN: ${{ secrets.YANDEX_FUNCTION_DELETE_IMAGE_IAM_TOKEN }}
#          YANDEX_FUNCTION_DELETE_IMAGE_NAME: ${{ secrets.YANDEX_FUNCTION_DELETE_IMAGE_NAME }}
#          YANDEX_FUNCTION_DELETE_IMAGE_BUCKET_NAME: ${{ secrets.YANDEX_FUNCTION_DELETE_IMAGE_BUCKET_NAME }}
#          YANDEX_FUNCTION_DELETE_IMAGE_OBJECT_STORAGE_MEDIA_RESIZED_PREFIX: ${{ secrets.YANDEX_FUNCTION_DELETE_IMAGE_OBJECT_STORAGE_MEDIA_RESIZED_PREFIX }}
#          YANDEX_FUNCTION_DELETE_IMAGE_OBJECT_STORAGE_MEDIA_PREFIX: ${{ secrets.YANDEX_FUNCTION_DELETE_IMAGE_OBJECT_STORAGE_MEDIA_PREFIX }}
#          YANDEX_FUNCTION_RESIZE_IMAGE_SERVICE_ACCOUNT_ID: ${{ secrets.YANDEX_FUNCTION_RESIZE_IMAGE_SERVICE_ACCOUNT_ID }}
#          YANDEX_FUNCTION_RESIZE_IMAGE_CLOUD_ID: ${{ secrets.YANDEX_FUNCTION_RESIZE_IMAGE_CLOUD_ID }}
#          YANDEX_FUNCTION_RESIZE_IMAGE_FOLDER_ID: ${{ secrets.YANDEX_FUNCTION_RESIZE_IMAGE_FOLDER_ID }}
#          YANDEX_FUNCTION_RESIZE_IMAGE_IAM_TOKEN: ${{ secrets.YANDEX_FUNCTION_RESIZE_IMAGE_IAM_TOKEN }}
#          YANDEX_FUNCTION_RESIZE_IMAGE_NAME: ${{ secrets.YANDEX_FUNCTION_RESIZE_IMAGE_NAME }}
#          YANDEX_FUNCTION_RESIZE_IMAGE_BUCKET_NAME: ${{ secrets.YANDEX_FUNCTION_RESIZE_IMAGE_BUCKET_NAME }}
#          YANDEX_FUNCTION_RESIZE_IMAGE_OBJECT_STORAGE_MEDIA_RESIZED_PREFIX: ${{ secrets.YANDEX_FUNCTION_RESIZE_IMAGE_OBJECT_STORAGE_MEDIA_RESIZED_PREFIX }}
#          YANDEX_FUNCTION_RESIZE_IMAGE_OBJECT_STORAGE_MEDIA_PREFIX: ${{ secrets.YANDEX_FUNCTION_RESIZE_IMAGE_OBJECT_STORAGE_MEDIA_PREFIX }}
#          RESIZE_IMAGE_VALID_SIZES: ${{ secrets.RESIZE_IMAGE_VALID_SIZES }}
#        run: |
#          source /home/runner/yandex-cloud/path.bash.inc
#          cd ./yandex/cloud_functions/
#          chmod +x ./deploy_cloud_functions.sh
#          ./deploy_cloud_functions.sh
#        shell: bash

#  apply_migrations:
#    name: "Apply database migrations"
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
#    needs: lint
#    concurrency:
#      group: Prod
#      cancel-in-progress: true
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.9'
#          cache: 'pip'
#      - name: Install system dependencies
#        run: |
#          sudo apt-get install libcurl4-gnutls-dev librtmp-dev
#      - name: Install project dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#      - name: Apply migrations
#        env:
#          ENV: ${{ secrets.P_ENV }}
#          PYTHONUNBUFFERED: ${{ secrets.P_PYTHONUNBUFFERED }}
#          ENVIRONMENT: ${{ secrets.P_ENVIRONMENT }}
#          DJANGO_SETTINGS_MODULE: ${{ secrets.P_DJANGO_SETTINGS_MODULE }}
#          PROJECT_ALLOWED_HOSTS: ${{ secrets.P_PROJECT_ALLOWED_HOSTS }}
#          PROJECT_ADMIN_EMAIL: ${{ secrets.P_PROJECT_ADMIN_EMAIL }}
#          PROJECT_FULL_DOMAIN: ${{ secrets.P_PROJECT_FULL_DOMAIN }}
#          SITE_DEFAULT_PROTOCOL: ${{ secrets.P_SITE_DEFAULT_PROTOCOL }}
#          USE_S3_BUCKET: ${{ secrets.P_USE_S3_BUCKET }}
#          YANDEX_STORAGE_BUCKET_NAME: ${{ secrets.P_YANDEX_STORAGE_BUCKET_NAME }}
#          YANDEX_STORAGE_ACCESS_KEY_ID: ${{ secrets.P_YANDEX_STORAGE_ACCESS_KEY_ID }}
#          YANDEX_STORAGE_SECRET_ACCESS_KEY: ${{ secrets.P_YANDEX_STORAGE_SECRET_ACCESS_KEY }}
#          YANDEX_STORAGE_CUSTOM_DOMAIN: ${{ secrets.P_YANDEX_STORAGE_CUSTOM_DOMAIN }}
#          MEDIA_URL: ${{ secrets.P_MEDIA_URL }}
#          STATIC_URL: ${{ secrets.P_STATIC_URL }}
#          EMAIL_HOST_USER_ESL: ${{ secrets.P_EMAIL_HOST_USER_ESL }}
#          EMAIL_HOST_PASSWORD_ESL: ${{ secrets.P_EMAIL_HOST_PASSWORD_ESL }}
#          USE_MANAGED_POSTGRES: ${{ secrets.P_USE_MANAGED_POSTGRES }}
#          POSTGRES_YANDEX_CLUSTER_NAME: ${{ secrets.P_POSTGRES_YANDEX_CLUSTER_NAME }}
#          POSTGRES_YANDEX_USER: ${{ secrets.P_POSTGRES_YANDEX_USER }}
#          POSTGRES_YANDEX_PASSWORD: ${{ secrets.P_POSTGRES_YANDEX_PASSWORD }}
#          POSTGRES_YANDEX_DB: ${{ secrets.P_POSTGRES_YANDEX_DB }}
#          POSTGRES_YANDEX_HOST: ${{ secrets.P_POSTGRES_YANDEX_HOST }}
#          POSTGRES_YANDEX_PORT: ${{ secrets.P_POSTGRES_YANDEX_PORT }}
#          POSTGRES_SSL_CERT_DOCKER_PATH: ${{ secrets.P_POSTGRES_SSL_CERT_DOCKER_PATH }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.P_AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.P_AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.P_AWS_DEFAULT_REGION }}
#          YMQ_ENDPOINT: ${{ secrets.P_YMQ_ENDPOINT }}
#          YMQ_DEFAULT_QUEUE_URL: ${{ secrets.P_YMQ_DEFAULT_QUEUE_URL }}
#          YMQ_EMAILS_QUEUE_URL: ${{ secrets.P_YMQ_EMAILS_QUEUE_URL }}
#          YMQ_URGENT_NOTIFICATIONS_QUEUE_URL: ${{ secrets.P_YMQ_URGENT_NOTIFICATIONS_QUEUE_URL }}
#          YMQ_CELERY_QUEUE_URL: ${{ secrets.P_YMQ_CELERY_QUEUE_URL }}
#          CELERY_BROKER_URL: ${{ secrets.P_CELERY_BROKER_URL }}
#          CELERY_RESULT_BACKEND: ${{ secrets.P_CELERY_RESULT_BACKEND }}
#          REDIS_DECODE_RESPONSES: ${{ secrets.P_REDIS_DECODE_RESPONSES }}
#          REDIS_PORT: ${{ secrets.P_REDIS_PORT }}
#          REDIS_SSL_CERT_DOCKER_PATH: ${{ secrets.P_REDIS_SSL_CERT_DOCKER_PATH }}
#          REDIS_SENTINEL_HOSTS: ${{ secrets.P_REDIS_SENTINEL_HOSTS }}
#          REDIS_CLUSTER_NAME: ${{ secrets.P_REDIS_CLUSTER_NAME }}
#          REDIS_CLUSTER_PASSWORD: ${{ secrets.P_REDIS_CLUSTER_PASSWORD }}
#          REDIS_CACHE_DB: ${{ secrets.P_REDIS_CACHE_DB }}
#          REDIS_MAIN_DB: ${{ secrets.P_REDIS_MAIN_DB }}
#          REDIS_SESSION_DB: ${{ secrets.P_REDIS_SESSION_DB }}
#          CELERY_REDIS_DB: ${{ secrets.P_CELERY_REDIS_DB }}
#          REDIS_CHANNELS_DB: ${{ secrets.P_REDIS_CHANNELS_DB }}
#          REDIS_CHANNELS_URL: ${{ secrets.P_REDIS_CHANNELS_URL }}
#          TWILIO_ACCOUNT_SID: ${{ secrets.P_TWILIO_ACCOUNT_SID }}
#          TWILIO_AUTH_TOKEN: ${{ secrets.P_TWILIO_AUTH_TOKEN }}
#          TWILIO_PHONE_NUMBER: ${{ secrets.P_TWILIO_PHONE_NUMBER }}
#          AIRBNB_SENTRY_DSN: ${{ secrets.P_AIRBNB_SENTRY_DSN }}
#        run: |
#          cd ./airbnb_app/
#          python manage.py migrate --noinput

#  push_to_registry:
#    name: "Push new Docker image to Docker Hub"
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
#    # needs: [lint, apply_migrations]
#    concurrency:
#      group: Prod
#      cancel-in-progress: true
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v2
#      - name: Log in to Docker Hub
#        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#        with:
#          images: romanreznikov/backend
#      - name: Add SHORT_SHA env property with commit short sha
#        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
#      - name: TEST
#        run: echo ${SHORT_SHA}
#      - name: Build and push Docker image
#        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
#        with:
#          context: .
#          file: prod.Dockerfile
#          push: true
#          tags: romanreznikov/backend:latest,romanreznikov/backend:123

  deploy:
      name: "Deploy Swarm Stack to production"
      runs-on: ubuntu-latest
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      # needs: [push_to_registry, apply_migrations]
      # needs: [push_to_registry]
      concurrency:
        group: Prod
        cancel-in-progress: true
      steps:
        - name: Configure SSH
          run: |
            mkdir -p ~/.ssh/
            echo "$SSH_KEY" > ~/.ssh/prod.key
            chmod 600 ~/.ssh/prod.key
            cat >>~/.ssh/config <<END
            Host prod
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/prod.key
              StrictHostKeyChecking no
            END
          env:
            SSH_USER: ${{ secrets.PROD_SSH_USER }}
            SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
            SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
        - name: Check out the source
          run: ssh prod 'cd /home/roman/projects/airbnb-clone && git fetch && git reset --hard origin/master'
        - name: Deploy Docker Swarm stack
          env:
            CI_COMMIT_SHORT_SHA: ${SHORT_SHA}
            ENV_VAR: "test_variable"
          if: ${{ always() }}
          # run: ssh prod 'cd /home/roman/projects/airbnb-clone && env $(cat .env | grep ^[A-Z] | xargs) docker stack deploy -c stack-prod.yml airbnb_app --with-registry-auth'
          run: ssh prod 'echo $ENV_VAR ${ENV_VAR} $SHORT_SHA ${SHORT_SHA} $PATH'
