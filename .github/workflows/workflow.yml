name: Main workflow

on:
  push:
    paths-ignore:
      - '**.md'

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.linter.txt
      - name: Check editorconfig settings
        run: ec
      - name: Lint with flake8
        run: flake8 .
      - name: Lint with isort
        run: isort -qc .

  deploy_cloud_functions:
    name: "Deploy all Yandex Cloud Functions"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.9 ]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: lint
#    concurrency:
#      group: Prod
#      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.linter.txt
      - name: Install Yandex Cloud CLI
        run: curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
      - name: Login to Yandex Cloud Container Registry
        id: login-cr
        uses: yc-actions/yc-cr-login@v0.1-alpha
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      - name: Export repository secrets
        run: |
          cd ./yandex/cloud_functions/
          chmod +x ./export_github_secrets.sh
          ./export_github_secrets.sh
        shell: bash
      - name: Deploy cloud functions
        run: |
          cd ./yandex/cloud_functions/
          chmod +x ./deploy_cloud_functions.sh
          ./deploy_cloud_functions.sh
        shell: bash

  push_to_registry:
    name: "Push new Docker image to Docker Hub"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: lint
    concurrency:
      group: Prod
      cancel-in-progress: true
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: romanreznikov/backend
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: prod.Dockerfile
          push: true
          tags: romanreznikov/backend:latest

  deploy:
      name: "Deploy Swarm Stack to production"
      runs-on: ubuntu-latest
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      needs: push_to_registry
      concurrency:
        group: Prod
        cancel-in-progress: true
      steps:
        - name: Configure SSH
          run: |
            mkdir -p ~/.ssh/
            echo "$SSH_KEY" > ~/.ssh/prod.key
            chmod 600 ~/.ssh/prod.key
            cat >>~/.ssh/config <<END
            Host prod
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/prod.key
              StrictHostKeyChecking no
            END
          env:
            SSH_USER: ${{ secrets.PROD_SSH_USER }}
            SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
            SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
        - name: Check out the source
          run: ssh prod 'cd /home/roman/projects/airbnb-clone && git fetch && git reset --hard origin/master'
        - name: Deploy Docker Swarm stack
          if: ${{ always() }}
          run: ssh prod 'cd /home/roman/projects/airbnb-clone && env $(cat .env | grep ^[A-Z] | xargs) docker stack deploy -c stack-prod.yml airbnb_app --with-registry-auth'
